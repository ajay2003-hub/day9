class Solution {
    public static int calJump(int si, int[] nums, int[] dp) {
        if (si >= nums.length - 1) {
            return 0; // No more jumps needed if we're at or beyond last index
        }

        if (dp[si] != -1) {
            return dp[si];
        }

        int minJumps = Integer.MAX_VALUE;
        int maxStep = nums[si];

        for (int i = 1; i <= maxStep; i++) {
            if (si + i < nums.length) {
                int jumps = calJump(si + i, nums, dp);
                if (jumps != Integer.MAX_VALUE) {
                    minJumps = Math.min(minJumps, jumps + 1); // Add 1 for this jump
                }
            }
        }

        return dp[si] = minJumps;
    }

    public int jump(int[] nums) {
        int[] dp = new int[nums.length];
        Arrays.fill(dp, -1); // Use -1 to indicate uncomputed
        return calJump(0, nums, dp);
    }
}
